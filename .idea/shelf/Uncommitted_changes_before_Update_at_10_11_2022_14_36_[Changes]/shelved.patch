Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># This .gitignore file should be placed at the root of your Unity project directory\r\n#\r\n# Get latest from https://github.com/github/gitignore/blob/master/Unity.gitignore\r\n#\r\n/[Ll]ibrary/\r\n/[Tt]emp/\r\n/[Oo]bj/\r\n/[Bb]uild/\r\n/[Bb]uilds/\r\n/[Ll]ogs/\r\n/[Mm]emoryCaptures/\r\n\r\n# Asset meta data should only be ignored when the corresponding asset is also ignored\r\n!/[Aa]ssets/**/*.meta\r\n\r\n# Uncomment this line if you wish to ignore the asset store tools plugin\r\n# /[Aa]ssets/AssetStoreTools*\r\n\r\n# Autogenerated Jetbrains Rider plugin\r\n[Aa]ssets/Plugins/Editor/JetBrains*\r\n\r\n# Visual Studio cache directory\r\n.vs/\r\n\r\n# Gradle cache directory\r\n.gradle/\r\n\r\n# Autogenerated VS/MD/Consulo solution and project files\r\nExportedObj/\r\n.consulo/\r\n*.csproj\r\n*.unityproj\r\n*.sln\r\n*.suo\r\n*.tmp\r\n*.user\r\n*.userprefs\r\n*.pidb\r\n*.booproj\r\n*.svd\r\n*.pdb\r\n*.mdb\r\n*.opendb\r\n*.VC.db\r\n*.vsconfig\r\n\r\n# Unity3D generated meta files\r\n*.pidb.meta\r\n*.pdb.meta\r\n*.mdb.meta\r\n\r\n# Unity3D generated file on crash reports\r\nsysinfo.txt\r\n\r\n# Builds\r\n*.apk\r\n*.unitypackage\r\n\r\n# Crashlytics generated file\r\ncrashlytics-build.properties\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision e6ae0f21e01a860141b4ae6d51e671104bfe1240)
+++ b/.gitignore	(date 1668087208952)
@@ -9,6 +9,7 @@
 /[Bb]uilds/
 /[Ll]ogs/
 /[Mm]emoryCaptures/
+/[Uu]ser[Ss]ettings/
 
 # Asset meta data should only be ignored when the corresponding asset is also ignored
 !/[Aa]ssets/**/*.meta
Index: Assets/Character/Scripts/CameraMovement.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\n\r\npublic class CameraMovement : MonoBehaviour\r\n{\r\n    [SerializeField] private float speed;\r\n    [SerializeField] private Transform player;\r\n    [SerializeField] private float aheadDistance;\r\n    [SerializeField] private float cameraSpeed;\r\n    private float lookAhead;\r\n\r\n    // Start is called before the first frame update\r\n    void Start()\r\n    {\r\n\r\n    }\r\n\r\n    // Update is called once per frame\r\n    void Update()\r\n    {\r\n        transform.position = new Vector3(player.position.x + lookAhead, transform.position.y, transform.position.z);\r\n        lookAhead = Mathf.Lerp(lookAhead, (aheadDistance * player.localScale.x), Time.deltaTime * cameraSpeed);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Assets/Character/Scripts/CameraMovement.cs b/Assets/Character/Scripts/CameraMovement.cs
--- a/Assets/Character/Scripts/CameraMovement.cs	(revision e6ae0f21e01a860141b4ae6d51e671104bfe1240)
+++ b/Assets/Character/Scripts/CameraMovement.cs	(date 1668087208956)
@@ -1,25 +1,49 @@
-using System.Collections;
-using System.Collections.Generic;
 using UnityEngine;
 
 public class CameraMovement : MonoBehaviour
 {
-    [SerializeField] private float speed;
-    [SerializeField] private Transform player;
-    [SerializeField] private float aheadDistance;
-    [SerializeField] private float cameraSpeed;
-    private float lookAhead;
-
-    // Start is called before the first frame update
-    void Start()
-    {
+    private float SmoothValue = 0.15f;
+    private Vector3 velocity = Vector3.zero;
+    private bool isHigh;
+    private PlayerMovement playerMovement;
+    
+    [SerializeField] private Transform target;
 
+    private void Awake()
+    {
+        playerMovement = target.gameObject.GetComponent<PlayerMovement>();
     }
 
     // Update is called once per frame
-    void Update()
+    private void FixedUpdate()
     {
-        transform.position = new Vector3(player.position.x + lookAhead, transform.position.y, transform.position.z);
-        lookAhead = Mathf.Lerp(lookAhead, (aheadDistance * player.localScale.x), Time.deltaTime * cameraSpeed);
-    }
-}
+        float y = 3.25f;
+        switch (target.position.y)
+        {
+            case > 3f:
+            {
+                if (playerMovement.IsGrounded())
+                {
+                    isHigh = true;
+                }
+
+                if (isHigh)
+                {
+                    y = target.position.y;
+                }
+
+                break;
+            }
+            case < -0.2f:
+                y = target.position.y + 2f;
+                isHigh = false;
+                break;
+            default:
+                isHigh = false;
+                break;
+        }
+
+        Vector3 targetPosition = new Vector3(target.position.x, y, -10f);
+        transform.position = Vector3.SmoothDamp(transform.position, targetPosition, ref velocity, SmoothValue);
+    }
+}
\ No newline at end of file
